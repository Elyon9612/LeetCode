/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        fast = slow->next;
        slow->next = NULL;
        return merge(sortList(head),sortList(fast));
    }
private:
    ListNode* merge(ListNode* l,ListNode* r){
        ListNode* cur = new ListNode(0);
        ListNode* res = cur;
        
        while(l && r){
            if(l->val < r->val){
                cur->next = l;
                l = l->next;
            }else{
                cur->next = r;
                r = r->next;
            }
            cur=cur->next;
        }
        if(l)
            cur->next = l;
        if(r)
            cur->next = r;
        
        
        return res->next;
    }
};