typedef long long ll;

class Solution {
    ll M = 1e9+7;  
public:
    int colorTheGrid(int m, int n) {
        // Step-1: Select the valid order
        vector<int> table;
        for(int state = 0;state<pow(3,m);state++){          // max is: 3^5 = 243
            int cur = state;
            int flag = 1;
            vector<int> tmp;
            for(int i = 0;i<m;i++){
                int color = cur%3;
                if(!tmp.empty() && color == tmp.back()){
                    flag = 0;
                    break;
                }
                tmp.push_back(color);
                cur /= 3;
            }
            if(flag == 1){
                table.push_back(state);
            }
        }
        
        int k = table.size();
        
        // Step-2: DP
        vector<ll> pre(k,1);
        
        for(int s=1;s<n;s++){
            vector<ll> cur(k);
            for(int i=0;i<k;i++){
                cur[i] = 0;
                for(int j=0;j<k;j++){
                    if(check(table[i],table[j],m)){
                        cur[i] = (cur[i] + pre[j]) % M;
                    }
                }
            }
            swap(pre,cur);
        }
        
        // Step-3: Calculate the result:
        ll result = 0;
        for(int s= 0;s<k;s++){
            result = (result + pre[s]) % M;
        }
        return result;
    }
    
    bool check(int i,int j,int size){
        for(int i=0;i<size;i++){
            if(i%3 == j%3)          // check if the last digit is the same
                return false;
            i /= 3;
            j /= 3;
        }
        return true;
    }
};