class Solution {
public:
    int row[4] = {0,0,1,-1};
    int col[4] = {1,-1,0,0};
    
    int shortestPath(vector<vector<int>>& grid, int k) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> visit(n,vector<bool>(m,false));
        int result = helper(grid,k,visit,0,0);
        // cout << result << endl;
        return visit[n-1][m-1] == true? result : -1;
    }
private:
    int helper(vector<vector<int>>& grid,int k,vector<vector<bool>>& visit,int a,int b){
        visit[a][b] = true;
        int n = grid.size();
        int m = grid[0].size();
        int result = 0;
        for(int i=0;i<4;i++){
            int x = a + row[i];
            int y = b + col[i];
            if(x<0 || x>n || y<0 || y>m ||(grid[x][y] == 1 && k==0) || visit[x][y] == true)
                 continue;
            result ++;
            visit[x][y] = true;
            if(grid[x][y] == 1 && k !=0){
                result += helper(grid,k-1,visit,x,y);
            }else{
                result += helper(grid,k,visit,x,y);
            }
        }
        return result;
    }
};